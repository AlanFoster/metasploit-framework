I")<p>##Git Cheatsheet (survival level)</p>

<p>Here is a set of some of the most common things you’ll need to do in
your day-to-day workflow with Git.</p>

<p><strong>Pro Tip 1:</strong> you can get man pages for any git command by inserting a hyphen.  As in: “man git-fetch” or “man git-merge”</p>

<p><strong>Pro Tip 2:</strong> install the <a href="http://cheat.errtheblog.com/">cheat gem</a> for a really long cheat sheet available in your terminal.</p>

<h2 id="whats-going-on">What’s going on?</h2>

<ul>
  <li>
    <p>What branch am I on? Which files are modified, which are staged, which are untracked, etc?</p>

    <p><code class="highlighter-rouge">git status</code></p>
  </li>
</ul>

<h2 id="fetch-pull-and-push">Fetch, Pull, and Push</h2>

<ul>
  <li>
    <p>Get all new changes, and remote branch refs</p>

    <p><code class="highlighter-rouge">git fetch</code></p>
  </li>
  <li>
    <p>Do a git fetch and (if possible) a merge on the current branch</p>

    <p><code class="highlighter-rouge">git pull</code></p>
  </li>
  <li>
    <p>Push commits to the origin/master (like an SVN commit):</p>

    <p><code class="highlighter-rouge">git push origin master</code></p>
  </li>
  <li>
    <p>Push commits on a non-master branch:</p>

    <p><code class="highlighter-rouge">git push origin your_branch_name</code></p>
  </li>
</ul>

<h2 id="branching">Branching</h2>

<ul>
  <li>
    <p>See a list of local branches</p>

    <p><code class="highlighter-rouge">git branch</code></p>
  </li>
  <li>
    <p>Switch to an existing branch</p>

    <p><code class="highlighter-rouge">git checkout existing_branch_name</code></p>
  </li>
  <li>
    <p>Create a new branch and switch to it:</p>

    <p><code class="highlighter-rouge">git checkout -b new_branch_name</code></p>
  </li>
</ul>

<h2 id="merging-and-stashing">Merging and Stashing</h2>

<ul>
  <li>
    <p>Merge my working branch into current branch:</p>

    <p><code class="highlighter-rouge">git merge working_branch_name</code></p>
  </li>
  <li>
    <p>Temporarily clear my stage so I can switch to another branch
(“stashing”):</p>

    <p><code class="highlighter-rouge">git stash</code></p>
  </li>
  <li>
    <p>Get my stashed stuff back, leaving it in the list of stashes:</p>

    <p><code class="highlighter-rouge">git stash apply</code></p>
  </li>
  <li>
    <p>Get my stashed stuff back, removing it from the list:</p>

    <p><code class="highlighter-rouge">git stash pop</code></p>
  </li>
</ul>

<h2 id="history-conflicts-and-fixing-mistakes">History, Conflicts, and Fixing Mistakes</h2>

<ul>
  <li>
    <p>See the log of commits:</p>

    <p><code class="highlighter-rouge">git log</code></p>
  </li>
  <li>
    <p>See what changes were made in a given commit:</p>

    <p><code class="highlighter-rouge">git show COMMIT_HASH</code></p>
  </li>
  <li>
    <p>See more detailed log information:</p>

    <p><code class="highlighter-rouge">git whatchanged</code></p>
  </li>
  <li>
    <p>Get rid of all the changes I’ve made since last commit:</p>

    <p><code class="highlighter-rouge">git reset --hard</code></p>
  </li>
  <li>
    <p>Get rid of the changes for just one file:</p>

    <p><code class="highlighter-rouge">git checkout FILENAME</code></p>
  </li>
  <li>
    <p>Make HEAD point to the state of the codebase as of 2 commits ago:</p>

    <p><code class="highlighter-rouge">git checkout HEAD^^</code></p>
  </li>
  <li>
    <p>Fix a conflict (w/ system’s default graphical diff tool):</p>

    <p><code class="highlighter-rouge">git mergetool</code></p>
  </li>
  <li>
    <p>Revert a commit (be careful with merges!):</p>

    <p><code class="highlighter-rouge">git revert &lt;commit hash&gt;</code></p>
  </li>
  <li>
    <p>Revert a commit from a merge:</p>

    <p><code class="highlighter-rouge">git revert -m&lt;number of commits back in the merge to revert&gt; &lt;hash of merge commit&gt;</code></p>
  </li>
</ul>

<p>(e.g. git revert -m1 4f76f3bbb83ffe4de74a849ad9f68707e3568e16 will revert the first commit back
     in the merge performed at 4f76f3bbb83ffe4de74a849ad9f68707e3568e16)</p>

<h2 id="git-in-bash">Git in Bash</h2>
<p>When using Git, it’s very handy (read: pretty much mandatory) to have an ambient cue in your shell telling you what branch you’re currently on.  Use this function in your .profile/.bashrc/.bash_profile to enable you to place your Git branch in your prompt:</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>function parse_git_branch {
  git branch --no-color 2&gt; /dev/null | sed -e '/^[^*]/d' -e 's/* \(.*\)/(\1)/'
}
</code></pre></div></div>
:ET