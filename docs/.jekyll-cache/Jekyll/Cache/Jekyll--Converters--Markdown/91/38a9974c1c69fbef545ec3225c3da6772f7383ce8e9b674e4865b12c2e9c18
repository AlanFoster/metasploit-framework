I"’+<p>The Metasploit Framework provides different mixins you can use to develop a browser exploit, mainly they are <a href="https://github.com/rapid7/metasploit-framework/wiki/How-to-write-a-browser-exploit-using-HttpServer">Msf::Exploit::Remote::HttpServer</a>, Msf::Exploit::Remote::HttpServer::HTML and <a href="https://github.com/rapid7/metasploit-framework/wiki/How-to-write-a-browser-exploit-using-BrowserExploitServer">Msf::Exploit::Remote::BrowserExploitServer</a>. This writeup covers the HttpServer mixin.</p>

<p>The HttpServer mixin is kind of the mother of all HTTP server mixins (like BrowserExploitServer and HttpServer::HTML). To use it, your module is required to have a ‚Äúon_request_uri‚Äù method, which is a callback triggered when the HTTP server receives a HTTP request from the browser. An example of setting up ‚Äúon_request_uri‚Äù:</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">#</span>
<span class="c1"># Listens for a HTTP request.</span>
<span class="c1"># cli is the socket object, and request is a Rex::Proto::Http::Request object</span>
<span class="c1">#</span>
<span class="k">def</span> <span class="nf">on_request_uri</span><span class="p">(</span><span class="n">cli</span><span class="p">,</span> <span class="n">request</span><span class="p">)</span>
	<span class="n">print_status</span><span class="p">(</span><span class="s2">"Client requests URI: </span><span class="si">#{</span><span class="n">request</span><span class="p">.</span><span class="nf">uri</span><span class="si">}</span><span class="s2">"</span><span class="p">)</span>
<span class="k">end</span>
</code></pre></div></div>

<p>The ‚Äúon_request_uri‚Äù method is also where you can create the HTTP response. Here‚Äôs a couple of choices you can use to do that:</p>

<ul>
  <li><strong>send_not_found(cli)</strong> - Sends a 404 to the client. Make sure to pass the cli (socket) object.</li>
  <li><strong>send_redirect(cli, location=‚Äô/‚Äô, body=‚Äô‚Äô, headers={})</strong> - Redirects the client to a new location.</li>
  <li><strong>send_response(cli, body, headers={})</strong> - Sends a response to the client. This method is probably what you‚Äôll be using most of the time.</li>
</ul>

<p>If you‚Äôve seen some of our exploit modules, you will also see them using Exploit::Remote::HttpServer::HTML instead of Exploit::Remote::HttpServer. Usage is mostly the same, the difference is the Exploit::Remote::HttpServer::HTML mixin gives you access to some Javascript functions like Base64, heap spraying, OS detection, etc.</p>

<p>Here‚Äôs an example of sending a HTTP response:</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">#</span>
<span class="c1"># Sends a "Hello, world!" to the client</span>
<span class="c1">#</span>
<span class="k">def</span> <span class="nf">on_request_uri</span><span class="p">(</span><span class="n">cli</span><span class="p">,</span> <span class="n">request</span><span class="p">)</span>
	<span class="n">html</span> <span class="o">=</span> <span class="s2">"Hello, world!"</span>
	<span class="n">send_response</span><span class="p">(</span><span class="n">cli</span><span class="p">,</span> <span class="n">html</span><span class="p">)</span>
<span class="k">end</span>
</code></pre></div></div>

<p>Also note that in order to handle a HTTP request, it must contain the base URIPATH, which by default is random. This means if you want to handle multiple URIs (possible if you need to handle a redirect or a link), you also need to make sure they have the base URIPATH. To retrieve the base URIPATH, you can use the ‚Äúget_resource‚Äù method, here‚Äôs an example:</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">serve_page_1</span><span class="p">(</span><span class="n">cli</span><span class="p">)</span>
	<span class="n">html</span> <span class="o">=</span> <span class="s2">"This is page 1"</span>
	<span class="n">send_response</span><span class="p">(</span><span class="n">cli</span><span class="p">,</span> <span class="n">html</span><span class="p">)</span>
<span class="k">end</span>

<span class="k">def</span> <span class="nf">serve_page_2</span><span class="p">(</span><span class="n">cli</span><span class="p">)</span>
	<span class="n">html</span> <span class="o">=</span> <span class="s2">"This is page 2"</span>
	<span class="n">send_response</span><span class="p">(</span><span class="n">cli</span><span class="p">,</span> <span class="n">html</span><span class="p">)</span>
<span class="k">end</span>

<span class="k">def</span> <span class="nf">serve_default_page</span><span class="p">(</span><span class="n">cli</span><span class="p">)</span>
	<span class="n">html</span> <span class="o">=</span> <span class="sx">%Q|
	&lt;html&gt;
	&lt;a href="</span><span class="si">#{</span><span class="n">get_resource</span><span class="p">.</span><span class="nf">chomp</span><span class="p">(</span><span class="s1">'/'</span><span class="p">)</span><span class="si">}</span><span class="sx">/page_1.html"&gt;Go to page 1&lt;/a&gt;&lt;br&gt;
	&lt;a href="</span><span class="si">#{</span><span class="n">get_resource</span><span class="p">.</span><span class="nf">chomp</span><span class="p">(</span><span class="s1">'/'</span><span class="p">)</span><span class="si">}</span><span class="sx">/page_2.html"&gt;Go to page 2&lt;/a&gt;
	&lt;/html&gt;
	|</span>

	<span class="n">send_response</span><span class="p">(</span><span class="n">cli</span><span class="p">,</span> <span class="n">html</span><span class="p">)</span>
<span class="k">end</span>

<span class="k">def</span> <span class="nf">on_request_uri</span><span class="p">(</span><span class="n">cli</span><span class="p">,</span> <span class="n">request</span><span class="p">)</span>
	<span class="k">case</span> <span class="n">request</span><span class="p">.</span><span class="nf">uri</span>
	<span class="k">when</span> <span class="sr">/page_1\.html$/</span>
		<span class="n">serve_page_1</span><span class="p">(</span><span class="n">cli</span><span class="p">)</span>
	<span class="k">when</span> <span class="sr">/page_2\.html$/</span>
		<span class="n">serve_page_2</span><span class="p">(</span><span class="n">cli</span><span class="p">)</span>
	<span class="k">else</span>
		<span class="n">serve_default_page</span><span class="p">(</span><span class="n">cli</span><span class="p">)</span>
	<span class="k">end</span>
<span class="k">end</span>
</code></pre></div></div>

<p>Of course, when you write a Metasploit browser exploit there‚Äôs a lot more you need to think about. For example, your module probably needs to do browser detection, because it wouldn‚Äôt make any sense to allow Chrome to receive an IE exploit, would it? You probably also need to build a payload that‚Äôs specific to the target, which means your module needs to know what target it‚Äôs hitting, and you have to build a method to customize the exploit accordingly, etc. The HttpServer and HttpServer::HTML mixin provies all kinds of methods to allow you to accomplish all these. Make sure to check out the API documentation (you can either do this by running msf/documentation/gendocs.sh, or just run ‚Äúyard‚Äù in the msf directory), or checkout existing code examples (especially the recent ones).</p>

<p>To get things started, you can always use the following template to start developing your browser exploit:</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">##</span>
<span class="c1"># This module requires Metasploit: http://metasploit.com/download</span>
<span class="c1"># Current source: https://github.com/rapid7/metasploit-framework</span>
<span class="c1">##</span>

<span class="nb">require</span> <span class="s1">'msf/core'</span>

<span class="k">class</span> <span class="nc">MetasploitModule</span> <span class="o">&lt;</span> <span class="no">Msf</span><span class="o">::</span><span class="no">Exploit</span><span class="o">::</span><span class="no">Remote</span>
  <span class="no">Rank</span> <span class="o">=</span> <span class="no">NormalRanking</span>

  <span class="kp">include</span> <span class="no">Msf</span><span class="o">::</span><span class="no">Exploit</span><span class="o">::</span><span class="no">Remote</span><span class="o">::</span><span class="no">HttpServer</span>

  <span class="k">def</span> <span class="nf">initialize</span><span class="p">(</span><span class="n">info</span><span class="o">=</span><span class="p">{})</span>
    <span class="k">super</span><span class="p">(</span><span class="n">update_info</span><span class="p">(</span><span class="n">info</span><span class="p">,</span>
      <span class="s1">'Name'</span>           <span class="o">=&gt;</span> <span class="s2">"HttpServer mixin example"</span><span class="p">,</span>
      <span class="s1">'Description'</span>    <span class="o">=&gt;</span> <span class="sx">%q{
        Here's an example of using the HttpServer mixin
      }</span><span class="p">,</span>
      <span class="s1">'License'</span>        <span class="o">=&gt;</span> <span class="no">MSF_LICENSE</span><span class="p">,</span>
      <span class="s1">'Author'</span>         <span class="o">=&gt;</span> <span class="p">[</span> <span class="s1">'sinn3r'</span> <span class="p">],</span>
      <span class="s1">'References'</span>     <span class="o">=&gt;</span> 
        <span class="p">[</span>
          <span class="p">[</span> <span class="s1">'URL'</span><span class="p">,</span> <span class="s1">'http://metasploit.com'</span> <span class="p">]</span>
        <span class="p">],</span>
      <span class="s1">'Platform'</span>       <span class="o">=&gt;</span> <span class="s1">'win'</span><span class="p">,</span>
      <span class="s1">'Targets'</span>        <span class="o">=&gt;</span>
        <span class="p">[</span>
          <span class="p">[</span> <span class="s1">'Generic'</span><span class="p">,</span> <span class="p">{}</span> <span class="p">],</span>
        <span class="p">],</span>
      <span class="s1">'DisclosureDate'</span> <span class="o">=&gt;</span> <span class="s2">"Apr 1 2013"</span><span class="p">,</span>
      <span class="s1">'DefaultTarget'</span>  <span class="o">=&gt;</span> <span class="mi">0</span><span class="p">))</span>
  <span class="k">end</span>

  <span class="k">def</span> <span class="nf">on_request_uri</span><span class="p">(</span><span class="n">cli</span><span class="p">,</span> <span class="n">request</span><span class="p">)</span>
    <span class="n">html</span> <span class="o">=</span> <span class="s2">"hello"</span>
    <span class="n">send_response</span><span class="p">(</span><span class="n">cli</span><span class="p">,</span> <span class="n">html</span><span class="p">)</span>
  <span class="k">end</span>

<span class="k">end</span>
</code></pre></div></div>

<p>If you want to take a closer look at what the mixin can do, see:
https://github.com/rapid7/metasploit-framework/blob/master/lib/msf/core/exploit/http/server.rb</p>
:ET