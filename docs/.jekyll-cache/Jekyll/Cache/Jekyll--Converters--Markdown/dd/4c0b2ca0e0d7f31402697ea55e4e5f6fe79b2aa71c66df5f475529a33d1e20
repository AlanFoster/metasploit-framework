I"ÿ'<p>Dead shells. Nobody likes them. Yet, despite the advances made in the Metasploit stagers and Meterperter itself, we still see them regularly.</p>

<p>There are many reasons why shells refuse to connect, or die after theyâ€™re established. The goal of this post is to help people understand <em>why</em>. Hopefully, by the end, the most common causes will be understood, and users can fix things themselves. If there are cases that are missed in this post, then please let us know and weâ€™ll add them.</p>

<p>Over time, this post should become a canonical resource for debugging sessions.</p>

<h1 id="background-knowledge">Background Knowledge</h1>

<p>Prior to diving into the possible breakages and their causes, itâ€™s important to have some background knowledge of stagers, and how Meterpreter works. Please be sure to read the following articles prior to reading the rest of this post:</p>

<ul>
  <li>[[Meterpreter Stageless Mode]] - Covers the exploitation process, and how Meterpreter sessions are established. This is important because understanding how the different components interact, and what, allows for easier debugging later.</li>
  <li>[[Meterpreter Configuration]] - Covers how configuration works in Meterpreter. This is important because it highlights the separation of configuration in stagers and Meterpreter. This alone is the key to many breakages, especially in HTTP/S payloads.</li>
  <li>[[The ins and outs of HTTP and HTTPS communications in Meterpreter and Metasploit Stagers]] - Covers the detail of HTTP/S based communications in the stagers and in Meterpreter itself.</li>
</ul>

<h1 id="stagers-stages-and-handlers">Stagers, Stages, and Handlers</h1>

<p>Each exploit and handler is made up of multiple things, and theyâ€™re all independent:</p>

<ul>
  <li><strong>Stager</strong>: This is the small bit of code that is first executed by the target. It contains itâ€™s own bundled implementation of a communications channel. It has the goal of establishing communication with Metasploit, downloading the <strong>stage</strong>, and invoking it. It has itâ€™s <em>own configuration</em>.</li>
  <li><strong>Stage</strong>: This is the second payload that is executed by the target. It is sent to the target via the communications channel that was opened by the <strong>stage</strong>. Once downloaded, it is invoked and from there it takes over. It has itâ€™s <em>own configuration</em>.</li>
  <li><strong>Handler</strong>: This is the code that runs on the attackerâ€™s machine. It is responsible for handling the attacker-side of the communications channel that is established by the <strong>stager</strong>. It is responsible for uploading the <strong>stage</strong>. It is responsible for handling communication between the attacker and the target once the stage has taken over from the stager.</li>
</ul>

<p>In some cases there might be multiple stages (as is the case with POSIX Meterpreter). This is called an <strong>intermediate</strong> stage. Usually these stages are slightly bigger than the stager and can do more work to help establish communications. In the context of this article, they arenâ€™t too important.</p>

<p>The most important thing to remember is that both the <strong>stager</strong> and the <strong>stage</strong> have their own configurations that are <strong>independent</strong>. <em>THE MOST COMMON</em> cause of dead shells is the result of the <strong>stage</strong> not having the correct configuration (ie. itâ€™s different to that specified in the <strong>stager</strong>).</p>

<h1 id="lhost-and-lport">LHOST and LPORT</h1>

<p>Any user of Metasploit will tell you that they know what <code class="highlighter-rouge">LHOST</code> and <code class="highlighter-rouge">LPORT</code> mean, yet itâ€™s incredibly common to find out that their understanding isnâ€™t 100% correct. To prevent dead sessions that are related to misconfiguration of these values, we need to make sure we understand what they mean.</p>

<h2 id="lhost">LHOST</h2>

<p><code class="highlighter-rouge">LHOST</code> is short for <em>Local Host</em>. This value represents the IP address or host name that <strong>stagers</strong> and <strong>stages</strong> should attempt to connect to. It is where the <strong>handler</strong> can be reached. This doesnâ€™t mean that this is where the handler actually <em>exists</em>.</p>

<p><code class="highlighter-rouge">LHOST</code> is a value that meaning from the perspective of the target machine. This value is passed along as part of the configuration for <strong>stagers</strong> and <strong>stages</strong>, and tells the target machine where to go to reach the handler, and so this has to map to a value that <em>is reachable by the target</em>.</p>

<p>A <strong>handler</strong> obviously needs to listen on a host/IP for the incoming connection. In cases where the <code class="highlighter-rouge">LHOST</code> value (ie. the address that the target is able to reach) is the <em>same</em> as that which the host can listen on, no extra work has to be done. The <code class="highlighter-rouge">LHOST</code> value is used by the handler.</p>

<p>However, if some kind of NAT or port forward is enabled, or if the handler is behind a firewall, etc, then setting <code class="highlighter-rouge">LHOST</code> isnâ€™t enough. In order to listen on the appropriate interface, another setting must be used called <code class="highlighter-rouge">ReverseListenerBindHost</code>. This value tells the <strong>handler</strong> to listen on a different interface/IP, but it doesnâ€™t change the fact that the <code class="highlighter-rouge">LHOST</code> value is given to the target when the <strong>stage</strong> is uploaded.</p>

<p>In short, <code class="highlighter-rouge">LHOST</code> must always remain the IP/host that is routable from the target, and if this value is not the same as what the listener needs to bind to, then change the <code class="highlighter-rouge">ReverseListenerBindHost</code> value. If youâ€™re attacking something across the Internet and you specify an internal IP in <code class="highlighter-rouge">LHOST</code>, youâ€™re doing it wrong.</p>

<h2 id="lport">LPORT</h2>

<p>The principles of <code class="highlighter-rouge">LHOST</code> / <code class="highlighter-rouge">ReverseListenerBindHost</code> can be applied to <code class="highlighter-rouge">LPORT</code> and <code class="highlighter-rouge">ReverseListenerBindPort</code> as well. If you have port forwarding in place, and your listener needs to bind to a different port, then you need to make use of the <code class="highlighter-rouge">ReverseListenerBindPort</code> setting.</p>

<p>The classic example of this case is where an attacker wants to make use of port <code class="highlighter-rouge">443</code>, but rightfully doesnâ€™t want to run Metasploit as <code class="highlighter-rouge">root</code> just so they can directly bind to ports lower than <code class="highlighter-rouge">1024</code>. Instead, the set up a port forward (on their router, or using <code class="highlighter-rouge">iptables</code>) so that <code class="highlighter-rouge">443</code> forwards to <code class="highlighter-rouge">8443</code>, with a goal of accepting connections on that port instead.</p>

<p>To accommodate this scenario, the <code class="highlighter-rouge">LHOST</code> value must <strong>still contain <code class="highlighter-rouge">443</code></strong>, as this is the port that the target machine needs to establish communications on; <code class="highlighter-rouge">443</code> is the value that needs to go out with the <strong>stager</strong> and the <strong>stage</strong> configurations. Metasploit needs to bind locally to port <code class="highlighter-rouge">8443</code>, and so the <strong>handler</strong> is configured so that <code class="highlighter-rouge">ReverseListenerBindPort</code> has this value instead.</p>

<p>When the handler launches, it binds to <code class="highlighter-rouge">8443</code> and handles any connections it receives. When a stage is generated, it uses <code class="highlighter-rouge">443</code> from <code class="highlighter-rouge">LHOST</code> value to populate the configuration.</p>

<p>If the attacker makes the mistake of either setting <code class="highlighter-rouge">LPORT</code> to <code class="highlighter-rouge">8443</code>, or leaving <code class="highlighter-rouge">LPORT</code> as <code class="highlighter-rouge">443</code> and not using <code class="highlighter-rouge">ReverseListenerBindPort</code>, then the result is either a dead shell after the first stage, or no connect back at all.</p>

<h1 id="dead-shells---what-to-check-for">Dead Shells - What to check for?</h1>

<h2 id="quick-things-to-check">Quick things to check</h2>

<ul>
  <li>Make sure that <code class="highlighter-rouge">LHOST</code> is set to a routable address from the target, and not a local listen address.</li>
  <li>Make sure that <code class="highlighter-rouge">LPORT</code> is set to the port number that the target needs to connect to.</li>
  <li>Make sure that <code class="highlighter-rouge">ReverseListenerBindPort</code> is set if port forwarding is enabled and the traffic is being routed to a different port.</li>
  <li>Make sure that your listenerâ€™s configuration matches that of the target from an architecture perspective. If you mix x64 listeners with x86 payloads (and vice versa), things will go bad.</li>
</ul>

<h2 id="not-so-quick-things-to-check">Not so quick things to check</h2>

<ul>
  <li>If the target is running AntiVirus thereâ€™s a chance that the <strong>stage</strong> (ie. <code class="highlighter-rouge">metsrv</code>) is being caught while being uploaded. <code class="highlighter-rouge">reverse_tcp</code> and <code class="highlighter-rouge">reverse_http</code> <strong>stagers</strong> download <code class="highlighter-rouge">metsrv</code> <em>without</em> any encryption, and so the content of the DLL is visible to anything watching on the wire. <code class="highlighter-rouge">reverse_https</code> can still get caught in cases where AV is doing MITM content inspection. In this case, consider encoding your payloads, or if possible using <em>stageless</em> meterpreter instead.</li>
</ul>

:ET